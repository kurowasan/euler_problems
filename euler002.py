'''
Problem:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Answer:
4613732
Best time:
0.000s

Walkthrough:
use the Binet formula to find the n th number of the fibonacci suite
Since the suite is odd + odd + even, every factor of 3 is an even number (loop by step 3)
'''
import math
import datetime

def fibo(limit):
    s = 0
    for n in range(0, (limit + 1), 3):
        fn = ((1 + math.sqrt(5))**n - (1 - math.sqrt(5))**n)/(2**n * math.sqrt(5))
        if(fn > 4000000):
            return s
        else:
            s += fn
    return s

number = 40000000

a = datetime.datetime.now()
print(fibo(number))
b = datetime.datetime.now()
print(b - a)