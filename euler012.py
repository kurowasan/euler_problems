'''
Problem:
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Answer:
76576500
Best time:
0:00:22.213270s
'''
import datetime

def findTriangleNumber(n):
    return (int)(n * (n + 1)/2)

def findPrimeFactors(nb):
    same = 1
    product = 1
    i = 2
    #nbCopy = nb
    
    while nb != 1:        
        if(nb % i == 0):
            nb = nb / i
            same += 1
        else:
            if(same != 1):
                product *= same
                same = 1
            i += 1
    if(same != 1):
        product *= same

    return product

      
a = datetime.datetime.now()

factors = 0
i = 2
while(factors < 50):
    factors = findPrimeFactors(findTriangleNumber(i))
    print(factors)
    i += 1
print(i)

b = datetime.datetime.now()
print(b - a)